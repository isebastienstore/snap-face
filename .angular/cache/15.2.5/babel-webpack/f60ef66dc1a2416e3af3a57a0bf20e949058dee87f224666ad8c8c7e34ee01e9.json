{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  /*\n  Si le token existe, la méthode  canActivate()  retourne  true  , et la navigation continue.\n   Inversement, si le token n'existe pas,  canActivate()  lance la redirection et retourne  false  , empêchant la navigation directe\n   */\n  canActivate(route, state) {\n    const token = this.auth.getToken();\n    if (token) {\n      return true;\n    } else {\n      this.router.navigateByUrl('/auth/login');\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEhE;;;;EAIAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,KAAK,GAAG,IAAI,CAACL,IAAI,CAACM,QAAQ,EAAE;IAClC,IAAID,KAAK,EAAE;MACT,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACJ,MAAM,CAACM,aAAa,CAAC,aAAa,CAAC;MACxC,OAAO,KAAK;;EAEhB;;AAfWT,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["AuthGuard","constructor","auth","router","canActivate","route","state","token","getToken","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["/home/isebastien/projects/snapface/src/app/core/guards/auth.guard.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from \"@angular/router\";\nimport {AuthService} from \"../services/auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate{\n  constructor(private auth: AuthService, private router: Router) {}\n\n  /*\n  Si le token existe, la méthode  canActivate()  retourne  true  , et la navigation continue.\n   Inversement, si le token n'existe pas,  canActivate()  lance la redirection et retourne  false  , empêchant la navigation directe\n   */\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const token = this.auth.getToken();\n    if (token) {\n      return true;\n    } else {\n      this.router.navigateByUrl('/auth/login');\n      return false;\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}