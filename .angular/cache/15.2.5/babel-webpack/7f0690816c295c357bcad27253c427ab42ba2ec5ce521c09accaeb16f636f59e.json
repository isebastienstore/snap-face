{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const headers = new HttpHeaders().append('Authorization', `Bearer ${this.authService.getToken()}`);\n    const modifiedReq = req.clone({\n      headers\n    });\n    return next.handle(modifiedReq);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAAiCA,WAAW,QAAsC,sBAAsB;;;AAMxG,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,OAAO,GAAG,IAAIP,WAAW,EAAE,CAC9BQ,MAAM,CAAC,eAAe,EAAE,UAAU,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE,EAAE,CAAC;IACnE,MAAMC,WAAW,GAAGL,GAAG,CAACM,KAAK,CAAC;MAAEJ;IAAO,CAAE,CAAC;IAC1C,OAAOD,IAAI,CAACM,MAAM,CAACF,WAAW,CAAC;EACjC;;AATWT,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["HttpHeaders","AuthInterceptor","constructor","authService","intercept","req","next","headers","append","getToken","modifiedReq","clone","handle","factory"],"sourceRoot":"","sources":["/home/isebastien/projects/angular_project/snapface/src/app/core/interceptors/auth.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const headers = new HttpHeaders()\n      .append('Authorization', `Bearer ${this.authService.getToken()}`);\n    const modifiedReq = req.clone({ headers });\n    return next.handle(modifiedReq);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}