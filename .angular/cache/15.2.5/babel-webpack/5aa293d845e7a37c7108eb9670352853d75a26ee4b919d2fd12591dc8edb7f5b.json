{"ast":null,"code":"import { switchMap } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FaceSnapsService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAllFaceSnaps() {\n    return this.http.get('http://localhost:3000/facesnaps');\n  }\n  getFaceSnapById(faceSnapId) {\n    return this.http.get(`http://localhost:3000/facesnaps/${faceSnapId}`);\n    /*   const faceSnap= this.faceSnaps.find(faceSnap => faceSnap.id === faceSnapId);\n       if (!faceSnap)\n         throw new Error(\"FaceSnap not found !\");\n       else\n         return faceSnap;\n         */\n  }\n  // snapType: 'snap' | 'unsnap': cette declaration oblige tout appel à cette methode à utiliser l'un des deux arguments\n  snapFaceSnapById(faceSnapId, snapType) {\n    return this.getFaceSnapById(faceSnapId).pipe(map(faceSnap => ({\n      ...faceSnap,\n      snaps: faceSnap.snaps + (snapType === 'snap' ? 1 : -1)\n    })), switchMap(updatedFaceSnap => this.http.put(`http://localhost:3000/facesnaps/${faceSnapId}`, updatedFaceSnap)));\n    /* ancienne implementation\n    const faceSnap= this.getFaceSnapById(faceSnapId);\n     snapType === 'snap' ? faceSnap.snaps++ : faceSnap.snaps--;\n       */\n  }\n\n  addFaceSnap(formValue) {\n    return this.getAllFaceSnaps().pipe(map(facesnaps => [...facesnaps].sort((a, b) => a.id - b.id)), map(sortedFaceSnaps => sortedFaceSnaps[sortedFaceSnaps.length - 1]), map(previousFaceSnap => ({\n      ...formValue,\n      snaps: 0,\n      createdDate: new Date(),\n      id: previousFaceSnap.id + 1\n    })), switchMap(newFacesnap => this.http.post('http://localhost:3000/faceSnaps', newFacesnap)));\n    /*  const faceSnap: FaceSnap = {\n        ...formValue,\n        snaps: 0,\n        createdDate: new Date(),\n        id: this.faceSnaps[this.faceSnaps.length - 1].id + 1\n      };\n      this.faceSnaps.push(faceSnap);\n        */\n  }\n}\n\nFaceSnapsService.ɵfac = function FaceSnapsService_Factory(t) {\n  return new (t || FaceSnapsService)(i0.ɵɵinject(i1.HttpClient));\n};\nFaceSnapsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FaceSnapsService,\n  factory: FaceSnapsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAoBA,SAAS,QAAO,MAAM;AAC1C,SAAQC,GAAG,QAAO,gBAAgB;;;AAKlC,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACxB;EACIC,eAAe;IACb,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,iCAAiC,CAAC;EACrE;EAEAC,eAAe,CAACC,UAAkB;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAW,mCAAmCE,UAAU,EAAE,CAAC;IAClF;;;;;;EAOC;EAIA;EACAC,gBAAgB,CAACD,UAAkB,EAAEE,QAA2B;IAC9D,OAAO,IAAI,CAACH,eAAe,CAACC,UAAU,CAAC,CAACG,IAAI,CAC1CV,GAAG,CAACW,QAAQ,KAAM;MAChB,GAAGA,QAAQ;MACXC,KAAK,EAAED,QAAQ,CAACC,KAAK,IAAIH,QAAQ,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;KACtD,CAAC,CAAE,EACJV,SAAS,CAACc,eAAe,IAAI,IAAI,CAACV,IAAI,CAACW,GAAG,CACxC,mCAAmCP,UAAU,EAAE,EAC/CM,eAAe,CAAC,CAAC,CACpB;IACF;;;;EAKD;;EAEAE,WAAW,CAACC,SAA0F;IACpG,OAAO,IAAI,CAACZ,eAAe,EAAE,CAACM,IAAI,CAChCV,GAAG,CAACiB,SAAS,IAAI,CAAC,GAAGA,SAAS,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,CAAC,CAAC,EAC5DrB,GAAG,CAACsB,eAAe,IAAIA,eAAe,CAACA,eAAe,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC,EACnEvB,GAAG,CAACwB,gBAAgB,KAAK;MACvB,GAAGR,SAAS;MACZJ,KAAK,EAAE,CAAC;MACRa,WAAW,EAAE,IAAIC,IAAI,EAAE;MACvBL,EAAE,EAAEG,gBAAgB,CAACH,EAAE,GAAG;KAC3B,CAAC,CAAC,EACHtB,SAAS,CAAC4B,WAAW,IAAI,IAAI,CAACxB,IAAI,CAACyB,IAAI,CACrC,iCAAiC,EACjCD,WAAW,CACZ,CAAC,CACH;IACH;;;;;;;;EASA;;;AA/DO1B,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA4B,SAAhB5B,gBAAgB;EAAA6B,YAFf;AAAM","names":["switchMap","map","FaceSnapsService","constructor","http","getAllFaceSnaps","get","getFaceSnapById","faceSnapId","snapFaceSnapById","snapType","pipe","faceSnap","snaps","updatedFaceSnap","put","addFaceSnap","formValue","facesnaps","sort","a","b","id","sortedFaceSnaps","length","previousFaceSnap","createdDate","Date","newFacesnap","post","factory","providedIn"],"sourceRoot":"","sources":["/home/isebastien/projects/snapface/src/app/core/services/face-snaps.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FaceSnap } from '../model/face-snap.model';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, switchMap} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FaceSnapsService {\n\n  constructor(private http: HttpClient) {\n  }\n      getAllFaceSnaps(): Observable<FaceSnap[]>{\n        return this.http.get<FaceSnap[]>('http://localhost:3000/facesnaps');\n      }\n\n      getFaceSnapById(faceSnapId: number): Observable<FaceSnap>{\n        return this.http.get<FaceSnap>(`http://localhost:3000/facesnaps/${faceSnapId}`);\n     /*   const faceSnap= this.faceSnaps.find(faceSnap => faceSnap.id === faceSnapId);\n        if (!faceSnap)\n          throw new Error(\"FaceSnap not found !\");\n        else\n          return faceSnap;\n\n      */\n      }\n\n\n\n      // snapType: 'snap' | 'unsnap': cette declaration oblige tout appel à cette methode à utiliser l'un des deux arguments\n      snapFaceSnapById(faceSnapId: number, snapType: 'snap' | 'unsnap') :Observable<FaceSnap>{\n        return this.getFaceSnapById(faceSnapId).pipe(\n          map(faceSnap => ( {\n            ...faceSnap,\n            snaps: faceSnap.snaps + (snapType === 'snap' ? 1 : -1)\n          }) ),\n          switchMap(updatedFaceSnap => this.http.put<FaceSnap>(\n            `http://localhost:3000/facesnaps/${faceSnapId}`,\n            updatedFaceSnap))\n        )\n       /* ancienne implementation\n       const faceSnap= this.getFaceSnapById(faceSnapId);\n        snapType === 'snap' ? faceSnap.snaps++ : faceSnap.snaps--;\n\n        */\n      }\n\n      addFaceSnap(formValue: { title: string, description: string, imageUrl: string, localisation?: string }): Observable<FaceSnap> {\n        return this.getAllFaceSnaps().pipe(\n          map(facesnaps => [...facesnaps].sort((a, b) => a.id - b.id)),\n          map(sortedFaceSnaps => sortedFaceSnaps[sortedFaceSnaps.length - 1]),\n          map(previousFaceSnap => ({\n            ...formValue,\n            snaps: 0,\n            createdDate: new Date(),\n            id: previousFaceSnap.id + 1\n          })),\n          switchMap(newFacesnap => this.http.post<FaceSnap>(\n            'http://localhost:3000/faceSnaps',\n            newFacesnap\n          ))\n        );\n      /*  const faceSnap: FaceSnap = {\n          ...formValue,\n          snaps: 0,\n          createdDate: new Date(),\n          id: this.faceSnaps[this.faceSnaps.length - 1].id + 1\n        };\n        this.faceSnaps.push(faceSnap);\n\n       */\n      }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}